// Content-Types Options https://www.geeksforgeeks.org/http-headers-content-type/

class AntiMalware {
  constructor({
    virusApikey: virusApikey,
    maxSize: maxSize,
    contentTypes: [contentTypes],
    path: path
  }){
    this.APIKEY = virusApikey;
    this.maxSize = maxSize;
    this.contentTypes = contentTypes;
    this.path = path;
  }

  isMaliciousVT(results){
    if (!results || !results.attributes || !results.attributes.last_analysis_stats) return undefined;
    if (results.attributes.last_analysis_stats.malicious > 0) return true;
    if (results.attributes.last_analysis_stats.suspicious > 0) return true;
    return false;
  }

  async getVTResult({hash:hash, id:id}){
    return new Promise((resolve, reject) => {
      const request = require('request');
      let endPath = arguments[0].hash ? 'files/' : 'analyses/';
      let endVar = arguments[0].hash ? arguments[0].hash : arguments[0].id;
      request({
        url: `https://www.virustotal.com/api/v3/${endPath}${endVar}`,
        method: 'GET',
        headers: {'x-apikey': this.APIKEY},
      }, (err, res) => {
        if (!err) {
          let isBad = this.isMaliciousVT(JSON.parse(res.body).data);
          let result = {isBad: isBad, analysis: JSON.parse(res.body).data, hash: hash, id:id};
          resolve(result);
        }else {
          reject(err);
        }
      });
    });
  }

  async getHash(path){
    return new Promise((resolve, reject) => {
      const CHILD_PROCESS = require('child_process');
      CHILD_PROCESS.exec(`"sha256sum" ${path}`, async (err,res) => {
        let hash = res.split(' ')[0];
        let result = await this.getVTResult({hash:hash});
        resolve(result);
      });
    });
  }

  async analyzeFileVT(path, fileType, isHash){
    return new Promise((resolve, reject) => {
      let file = require('fs').readFileSync(path);
      const Buffer = require('buffer').Buffer;
      if (typeof input == typeof "") file = Buffer.from(file, 'utf8');
      if (Buffer.isBuffer(file)) file = file;
      file = JSON.stringify(file);
      const request = require('request');
      request({
        url: 'https://www.virustotal.com/api/v3/files',
        method: 'POST',
        headers: {'x-apikey': this.APIKEY},
        formData: {file: {value: file, options: {filename: path.split('/')[path.split('/').length -1], filetype: fileType}}},
      }, async (err, res) => {
        if (!err) {
          let obj = isHash ? {hash: await this.getHash(path), id: JSON.parse(res.body).data.id} : {id: JSON.parse(res.body).data.id};
          let result = await this.getVTResult(obj);
          resolve(result);
        }else {
          reject(err);
        }
      });

    })
  }

  async isMaxSize(fileSize){
    return this.maxSize >= fileSize ?  true : false;
  }

  async isContentTypeAccepted(fileType){
    return this.contentTypes.indexOf(fileType) >= 0 ?  true : false;
  }

  async analyzeFileF(path){
    return new Promise((resolve, reject) => {
      const CHILD_PROCESS = require('child_process');
      CHILD_PROCESS.exec(`"file" ${path}`,(err,res) => {
        let result = res.replace('\n', '').split(':');
        let stringPath = result[0].trim();
        let typeOfFile = result[1].trim();
        resolve(typeOfFile);
      });
    });
  }

  async hasMalwarePDF(path){
    return new Promise((resolve, reject) => {
      const CHILD_PROCESS = require('child_process');
      CHILD_PROCESS.exec(`"peepdf" ${path} -j -f`, (err,res) => {
        const ANALYSIS = JSON.parse(res);
        if (ANALYSIS.peepdf_analysis.advanced[0].version_info.suspicious_elements.elements > 0) {
          for (var i = 0; i < ANALYSIS.peepdf_analysis.advanced[0].version_info.suspicious_elements.elements.length; i++) {
            let name = ANALYSIS.peepdf_analysis.advanced[0].version_info.suspicious_elements.elements[i].name;
            if (name === '/EmbeddedFiles' || name === '/EmbeddedFile') {
              resolve(ANALYSIS);
            }
          }
        }
        if (ANALYSIS.peepdf_analysis.advanced[0].version_info.js_objects.length > 0) resolve(ANALYSIS);
        else {
          resolve(false);
        }
      });
    });
  }

  async doAllTests(path, fileType){
    return new Promise((resolve, reject) => {
      let obj = {};
      this.analyzeFileF(path).then((res) => {
        obj.analyzeFileF = res;
        this.hasMalwarePDF(path).then((re) => {
          obj.hasMalwarePDF = re;
          this.analyzeFileVT(path, fileType).then((r) => {
            obj.analyzeFileVT = r;
            resolve(obj);
          })
        });
      });
    });
  }
}

module.exports = AntiMalware;
